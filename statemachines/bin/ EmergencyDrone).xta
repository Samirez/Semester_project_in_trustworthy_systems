int Charge = 09 ;
bool DefibrillatorIsDepleted = false ;

process AReceive(	
chan &BatteryCharged,
chan &MissionRecieved,
chan &StandbyFailure,
chan &FlyToTarget,
chan &AbortMission,
chan &AirborneFailure,
chan &Landing,
chan &AbortMission,
chan &ArrivedFailure,
chan &TakingOff,
chan &LandedFailure,
chan &HasReturned,
chan &ReturningFailure,
chan &DefibrillatorDepleted,
chan &DefibrillatorNotDepleted
){
	bool ArrivedAtCoordinates = true;
	bool Abort = false;
	bool ArrivedAtBase = true;
	bool ReceivedMission = true;
	bool Error = false;
	bool Recall = true;
	bool FoundLandingPlace = true;
	
	state
		Charging,
		Standby,
		Airborne,
		Arrived,
		Landed,
		Returning,
		Returned,
		Maintenance,
		Failed
;		
		init Charging;
		
	trans
		Charging -> Standby{ guard Charge>=0.7; sync BatteryCharged?; },
		Standby -> Airborne{ guard ReceivedMission==true; sync MissionRecieved?; },
		Standby -> Failed{ guard Error==true; sync StandbyFailure?; },
		Airborne -> Arrived{ guard ArrivedAtCoordinates==true; sync FlyToTarget?; },
		Airborne -> Returning{ guard Abort==true; sync AbortMission?; },
		Airborne -> Failed{ guard Error==true; sync AirborneFailure?; },
		Arrived -> Landed{ guard FoundLandingPlace==true; sync Landing?; },
		Arrived -> Returning{ guard Abort==true; sync AbortMission?; },
		Arrived -> Failed{ guard Error==true; sync ArrivedFailure?; },
		Landed -> Returning{ guard Recall==true; sync TakingOff?; },
		Landed -> Failed{ guard Error==true; sync LandedFailure?; },
		Returning -> Returned{ guard ArrivedAtBase==true; sync HasReturned?; },
		Returning -> Failed{ guard Error==true; sync ReturningFailure?; },
		Returned -> Maintenance{ guard DefibrillatorIsDepleted==true; sync DefibrillatorDepleted?; },
		Returned -> Charging{ guard DefibrillatorIsDepleted==false; sync DefibrillatorNotDepleted?; }
;		}
process ASend(	
chan &BatteryCharged,
chan &MissionRecieved,
chan &StandbyFailure,
chan &FlyToTarget,
chan &AbortMission,
chan &AirborneFailure,
chan &Landing,
chan &AbortMission,
chan &ArrivedFailure,
chan &TakingOff,
chan &LandedFailure,
chan &HasReturned,
chan &ReturningFailure,
chan &DefibrillatorDepleted,
chan &DefibrillatorNotDepleted
){
	bool ArrivedAtCoordinates = true;
	bool Abort = false;
	bool ArrivedAtBase = true;
	bool ReceivedMission = true;
	bool Error = false;
	bool Recall = true;
	bool FoundLandingPlace = true;
	
	state
		Charging,
		Standby,
		Airborne,
		Arrived,
		Landed,
		Returning,
		Returned,
		Maintenance,
		Failed
;		
		init Charging;
		
	trans
		Charging -> Standby{ guard Charge>=0.7; sync BatteryCharged!; },
		Standby -> Airborne{ guard ReceivedMission==true; sync MissionRecieved!; },
		Standby -> Failed{ guard Error==true; sync StandbyFailure!; },
		Airborne -> Arrived{ guard ArrivedAtCoordinates==true; sync FlyToTarget!; },
		Airborne -> Returning{ guard Abort==true; sync AbortMission!; },
		Airborne -> Failed{ guard Error==true; sync AirborneFailure!; },
		Arrived -> Landed{ guard FoundLandingPlace==true; sync Landing!; },
		Arrived -> Returning{ guard Abort==true; sync AbortMission!; },
		Arrived -> Failed{ guard Error==true; sync ArrivedFailure!; },
		Landed -> Returning{ guard Recall==true; sync TakingOff!; },
		Landed -> Failed{ guard Error==true; sync LandedFailure!; },
		Returning -> Returned{ guard ArrivedAtBase==true; sync HasReturned!; },
		Returning -> Failed{ guard Error==true; sync ReturningFailure!; },
		Returned -> Maintenance{ guard DefibrillatorIsDepleted==true; sync DefibrillatorDepleted!; },
		Returned -> Charging{ guard DefibrillatorIsDepleted==false; sync DefibrillatorNotDepleted!; }
;		}

chan BatteryCharged;
chan MissionRecieved;
chan StandbyFailure;
chan FlyToTarget;
chan AbortMission;
chan AirborneFailure;
chan Landing;
chan ArrivedFailure;
chan TakingOff;
chan LandedFailure;
chan HasReturned;
chan ReturningFailure;
chan DefibrillatorDepleted;
chan DefibrillatorNotDepleted;
chan DefibrillatorReady;
chan DefibrillatorUsed;

AReceive1 = AReceive(
BatteryCharged, 
MissionRecieved, 
StandbyFailure, 
FlyToTarget, 
AbortMission, 
AirborneFailure, 
Landing, 
AbortMission, 
ArrivedFailure, 
TakingOff, 
LandedFailure, 
HasReturned, 
ReturningFailure, 
DefibrillatorDepleted, 
DefibrillatorNotDepleted 
);
ASend1 = ASend(
BatteryCharged, 
MissionRecieved, 
StandbyFailure, 
FlyToTarget, 
AbortMission, 
AirborneFailure, 
Landing, 
AbortMission, 
ArrivedFailure, 
TakingOff, 
LandedFailure, 
HasReturned, 
ReturningFailure, 
DefibrillatorDepleted, 
DefibrillatorNotDepleted 
);

system 
AReceive1,
ASend1
;
