/*
 * generated by Xtext 2.30.0
 */
package org.xtext.gsht.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.gsht.gSelfOperatingHeuristicText.Model
import org.xtext.gsht.gSelfOperatingHeuristicText.State

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GSelfOperatingHeuristicTextGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.allContents.filter(typeof(Model)).forEach[it.generateFile(fsa)]
	}
		
	def void generateFile(Model model, IFileSystemAccess2 fsa){
		fsa.generateFile('gsht/'+model.name+'.java', model.generate)
	}
	
	def generate(Model model){
		'''
		/* Autogenerated Code */
		package gsht;
		
		import java.util.ArrayList;
		import java.util.HashMap;
		
		
		public class «model.name» {
			
			private State currentState;
			private HashMap<String, Object> globalProps = new HashMap<>() {
				{
				«FOR p : model.globals»
				put("«p.name»", «p.value»);
				«ENDFOR»
				}
			};
			
			private ArrayList<String> events = new ArrayList<>() {
				{
					«FOR event : model.events»
					add("«event.name»");
					«ENDFOR»
				}
			};
			
			private HashMap<String, State> states = new HashMap<>() {
				{
					«model.generateState()»
				}
			};

		    public void processEvent(String event) {
		        String nextStateName = currentState.onEvent(event);
		        if(nextStateName.equals(currentState.getName())) return;
		        if (currentState.propsReturnerSize() > 0) {
		            for (String key : currentState.getPropReturner().keySet()) {
		                globalProps.put(key, currentState.getPropReturnerValue(key));
		            }
		            currentState.clearPropReturner();
		        }
		        currentState = states.get(nextStateName);
		    };
		
		}
		'''
	}
		
	def generateState(Model model){
		'''
		«FOR state : model.states»
		put("«state.name»", new State() {
			{
				setName("«state.name»");
				«IF state.locals.length > 0»
				«FOR p : state.locals»
				addProp("«p.name»", «p.value»);
				«ENDFOR»
				«ENDIF»
				«state.generateTransition()»
			}
		});
		«ENDFOR»
		'''
	}
	
	def generateTransition(State state) {
		'''
		«IF state.transitions.length > 0»
		«FOR t : state.transitions»
		addTransition("«t.event.name»", new Transition() {
			{
				setEvent("«t.event.name»");
				setToState("«t.state.name»");
				«IF t.condition != null»
				setHasCondition(true);
				setEvaluatedValueName("«t.condition.left.variable.name»");
				setOperatorType("«t.condition.operator»");
				«IF t.condition.right == "TRUE"»
				setOperatingValue(true);
				«ELSEIF t.condition.right == "FALSE"»
				setOperatingValue(false);
				«ELSE»
				setOperatingValue(«t.condition.right»);
				«ENDIF»
				«ENDIF»
				«IF t.assignment  != null»
				setHasSetAction(true);
				setGlobalPropName("«t.assignment.currentVar»");
				setSetValue("«t.assignment.value»");
				«ENDIF»
			}
		});
		«ENDFOR»
		«ENDIF»
		'''
	}
}
