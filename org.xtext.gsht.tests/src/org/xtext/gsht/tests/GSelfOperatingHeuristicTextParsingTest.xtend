/*
 * generated by Xtext 2.29.0
 */
package org.xtext.gsht.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
//import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.gsht.gSelfOperatingHeuristicText.Model
import org.eclipse.xtext.util.EmfFormatter

@ExtendWith(InjectionExtension)
@InjectWith(GSelfOperatingHeuristicTextInjectorProvider)
class GSelfOperatingHeuristicTextParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			DRONE EmergencyDrone
			GLOBAL 
			{
				Charge as double = 0.9
				ErrorCode as String = "Operational"
				DefibrillatorIsDepleted as boolean = false
			}
			
			EVENTS 
			{
				BatteryCharged
				MissionReceived
				StandbyFailure
			   	FlyToTarget
				AbortMission
				AirborneFailure
				Landing
				ArrivedFailure
			    TakingOff
				LandedFailure
			    Returned
				ReturningFailure
			    DefibrillatorDepleted
				DefibrillatorNotDepleted
			}
			
			INIT STATE Charging
				TRANSITIONS 
				{
					ON BatteryCharged TO Standby IF Charge >= 0.7
				}
			
			STATE Standby
				PROPS
				{
					ReceivedMission as boolean = false
					Error as boolean = false
				}
				TRANSITIONS
				{
					ON MissionReceived TO Airborne IF ReceivedMission ==  TRUE
					ON StandbyFailure TO Failed IF Error == TRUE SET ErrorCode = 'Standby Failure'
				}
				
			STATE Airborne
				PROPS
				{
					ArrivedAtCoordinates as boolean = false
					Abort as boolean = false
					Error as boolean = false
				}
				TRANSITIONS
				{
					ON FlyToTarget TO Arrived IF ArrivedAtCoordinates == TRUE
					ON AbortMission TO Returning IF Abort == TRUE
					ON AirborneFailure TO Failed IF Error == TRUE SET ErrorCode = 'Airborne Failure'
				}
			
			STATE Arrived
				PROPS
				{
					FoundLandingPlace as boolean = false
					Abort as boolean = false
					Error as boolean = false
					}
				TRANSITIONS
				{
					ON Landing TO Landed IF FoundLandingPlace == TRUE
					ON AbortMission TO Returning IF Abort == TRUE
					ON ArrivedFailure TO Failed IF Error == TRUE SET ErrorCode = 'Arrived Failure'
				}
			
			STATE Landed
				PROPS
				{
					Recall as boolean = true
					Error as boolean = false
				}
				TRANSITIONS
				{
					ON TakingOff TO Returning IF Recall == TRUE
					ON LandedFailure TO Failed IF Error == True SET ErrorCode = 'Landed Failure'
				}
			
			STATE Returning
				PROPS
				{
					ArrivedAtBase as boolean = false
					Error as boolean = false
				}
				TRANSITIONS
				{
					ON Returned TO Returned IF ArrivedAtBase == TRUE
					ON ReturningFailure TO Failed IF Error == True SET ErrorCode = 'Returning Failure'
				}
			
			STATE Returned
				TRANSITIONS
				{
					ON DefibrillatorDepleted TO Maintenance IF DefibrillatorIsDepleted == TRUE
					ON DefibrillatorNotDepleted TO Charging IF DefibrillatorIsDepleted == FALSE
				}
			
		''')
		println(EmfFormatter.objToStr(result))
		//Assertions.assertNotNull(result)
		//val errors = result.eResource.errors
		//Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
