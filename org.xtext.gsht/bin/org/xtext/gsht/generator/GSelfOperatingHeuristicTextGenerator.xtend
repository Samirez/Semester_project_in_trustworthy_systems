/*
 * generated by Xtext 2.30.0
 */
package org.xtext.gsht.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.gsht.gSelfOperatingHeuristicText.Model
import org.xtext.gsht.gSelfOperatingHeuristicText.State

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GSelfOperatingHeuristicTextGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.allContents.filter(typeof(Model)).forEach[it.generateFile(fsa)]
		resource.allContents.filter(typeof(Model)).forEach[it.generateUppaal(fsa)]
	}
		
	def void generateFile(Model model, IFileSystemAccess2 fsa){
		fsa.generateFile(model+'.java', model.generate)
	}
	def generate(Model model){
		'''
			public class «model.name» {
				
				private State currentState;
				
				«FOR event: model.events»
					private String «event.name» = "«event.name»";
				«ENDFOR»
				
				«FOR state: model.states»
					public State «state.generateState»
				«ENDFOR»
				
				«FOR alter: model.alters»
					«alter»;
				«ENDFOR»
		}
		'''
	}
		
	def generateState(State state){
		'''
		«state.name»() {
		 	
			«FOR local: state.locals»
			private «local.type» «local.name»;
			«ENDFOR»
				
			«FOR local: state.locals»
			public «local.type» get«local.name»() {
				return this.«local.name»;
			}
				
			public void set«local.name»(«local.type» name){
				this.«local.name» = name;
			}
			«ENDFOR»
			public void onEvent(String event) {
				«FOR transition : state.transitions»
				if («transition.event.name».Equals(event)) {
					this.currentState = «transition.state.name»
				}
				«ENDFOR»
			}	
		}
		'''
	}
	
	def void generateUppaal(Model model, IFileSystemAccess2 fsa){
		
		var CharSequence context = '''
		«FOR automaton: model.automaton»
		process «automaton.name» {
			state
				«FOR location: automaton.location SEPARATOR ',' AFTER ';'»
					«location.state.name»
				«ENDFOR»
				
				init «automaton.location.get(0).state.name»;
			trans
				«FOR location: automaton.location AFTER ';'»
				«var state = location.state»
				«IF (!state.transitions.isEmpty() && location !== automaton.location.get(0))» 
				,
				«ENDIF»	
				«FOR transition: state.transitions SEPARATOR ','»
				«state.name» -> «transition.state.name» {}	
				«ENDFOR»		
				«ENDFOR»	
				}
		«ENDFOR»
		«FOR automaton: model.automaton»
		system «automaton.name»;
		«ENDFOR»
		'''
		
		fsa.generateFile(model+'.xta', context)
		
		
	}

}
