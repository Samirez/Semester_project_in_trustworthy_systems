/*
 * generated by Xtext 2.29.0
 */
package org.xtext.gsht.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.gsht.services.GSelfOperatingHeuristicTextGrammarAccess;

@SuppressWarnings("all")
public class GSelfOperatingHeuristicTextSyntacticSequencer extends AbstractSyntacticSequencer {

	protected GSelfOperatingHeuristicTextGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Alter___PROPSKeyword_3_0_LeftCurlyBracketKeyword_3_1_RightCurlyBracketKeyword_3_3__q;
	protected AbstractElementAlias match_Alter___TRANSITIONSKeyword_4_0_LeftCurlyBracketKeyword_4_1_RightCurlyBracketKeyword_4_3__q;
	protected AbstractElementAlias match_Model___GLOBALKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q;
	protected AbstractElementAlias match_State___PROPSKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q;
	protected AbstractElementAlias match_State___TRANSITIONSKeyword_3_0_LeftCurlyBracketKeyword_3_1_RightCurlyBracketKeyword_3_3__q;
	protected AbstractElementAlias match_Transition_IFKeyword_4_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GSelfOperatingHeuristicTextGrammarAccess) access;
		match_Alter___PROPSKeyword_3_0_LeftCurlyBracketKeyword_3_1_RightCurlyBracketKeyword_3_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAlterAccess().getPROPSKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getAlterAccess().getLeftCurlyBracketKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getAlterAccess().getRightCurlyBracketKeyword_3_3()));
		match_Alter___TRANSITIONSKeyword_4_0_LeftCurlyBracketKeyword_4_1_RightCurlyBracketKeyword_4_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAlterAccess().getTRANSITIONSKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getAlterAccess().getLeftCurlyBracketKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getAlterAccess().getRightCurlyBracketKeyword_4_3()));
		match_Model___GLOBALKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getModelAccess().getGLOBALKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_2_3()));
		match_State___PROPSKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStateAccess().getPROPSKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_2_3()));
		match_State___TRANSITIONSKeyword_3_0_LeftCurlyBracketKeyword_3_1_RightCurlyBracketKeyword_3_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStateAccess().getTRANSITIONSKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_3_3()));
		match_Transition_IFKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getTransitionAccess().getIFKeyword_4_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Alter___PROPSKeyword_3_0_LeftCurlyBracketKeyword_3_1_RightCurlyBracketKeyword_3_3__q.equals(syntax))
				emit_Alter___PROPSKeyword_3_0_LeftCurlyBracketKeyword_3_1_RightCurlyBracketKeyword_3_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Alter___TRANSITIONSKeyword_4_0_LeftCurlyBracketKeyword_4_1_RightCurlyBracketKeyword_4_3__q.equals(syntax))
				emit_Alter___TRANSITIONSKeyword_4_0_LeftCurlyBracketKeyword_4_1_RightCurlyBracketKeyword_4_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model___GLOBALKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q.equals(syntax))
				emit_Model___GLOBALKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_State___PROPSKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q.equals(syntax))
				emit_State___PROPSKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_State___TRANSITIONSKeyword_3_0_LeftCurlyBracketKeyword_3_1_RightCurlyBracketKeyword_3_3__q.equals(syntax))
				emit_State___TRANSITIONSKeyword_3_0_LeftCurlyBracketKeyword_3_1_RightCurlyBracketKeyword_3_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Transition_IFKeyword_4_0_q.equals(syntax))
				emit_Transition_IFKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('PROPS' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     state=[State|ID] (ambiguity) 'TRANSITIONS' '{' transitions+=Transition
	 *     state=[State|ID] (ambiguity) ('TRANSITIONS' '{' '}')? (rule end)
	 
	 * </pre>
	 */
	protected void emit_Alter___PROPSKeyword_3_0_LeftCurlyBracketKeyword_3_1_RightCurlyBracketKeyword_3_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('TRANSITIONS' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     locals+=Local '}' (ambiguity) (rule end)
	 *     state=[State|ID] ('PROPS' '{' '}')? (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Alter___TRANSITIONSKeyword_4_0_LeftCurlyBracketKeyword_4_1_RightCurlyBracketKeyword_4_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('GLOBAL' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 *     name=ID (ambiguity) alters+=Alter
	 *     name=ID (ambiguity) events+=Event
	 *     name=ID (ambiguity) states+=State
	 
	 * </pre>
	 */
	protected void emit_Model___GLOBALKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('PROPS' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) 'TRANSITIONS' '{' transitions+=Transition
	 *     name=ID (ambiguity) ('TRANSITIONS' '{' '}')? (rule end)
	 
	 * </pre>
	 */
	protected void emit_State___PROPSKeyword_2_0_LeftCurlyBracketKeyword_2_1_RightCurlyBracketKeyword_2_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('TRANSITIONS' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     locals+=Local '}' (ambiguity) (rule end)
	 *     name=ID ('PROPS' '{' '}')? (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_State___TRANSITIONSKeyword_3_0_LeftCurlyBracketKeyword_3_1_RightCurlyBracketKeyword_3_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'IF'?
	 *
	 * This ambiguous syntax occurs at:
	 *     state=[State|ID] (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Transition_IFKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
