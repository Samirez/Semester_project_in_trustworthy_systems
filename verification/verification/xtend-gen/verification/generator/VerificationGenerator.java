/**
 * generated by Xtext 2.30.0
 */
package verification.generator;

import com.google.common.collect.Iterators;
import java.util.ArrayList;
import java.util.HashMap;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import verification.verification.Alter;
import verification.verification.Assignment;
import verification.verification.Automaton;
import verification.verification.ComparisonOperator;
import verification.verification.Condition;
import verification.verification.DataType;
import verification.verification.Event;
import verification.verification.Global;
import verification.verification.Local;
import verification.verification.Location;
import verification.verification.Model;
import verification.verification.State;
import verification.verification.Transition;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class VerificationGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Procedure1<Model> _function = (Model it) -> {
      this.generateFile(it, fsa);
    };
    IteratorExtensions.<Model>forEach(Iterators.<Model>filter(resource.getAllContents(), Model.class), _function);
    final Procedure1<Model> _function_1 = (Model it) -> {
      this.generateUppaal(it, fsa);
    };
    IteratorExtensions.<Model>forEach(Iterators.<Model>filter(resource.getAllContents(), Model.class), _function_1);
  }

  public void generateFile(final Model model, final IFileSystemAccess2 fsa) {
    String _plus = (model + ".java");
    fsa.generateFile(_plus, this.generate(model));
  }

  public CharSequence generate(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("public class ");
    String _name = model.getName();
    _builder.append(_name, "\t");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private State currentState;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Event> _events = model.getEvents();
      for(final Event event : _events) {
        _builder.append("\t\t");
        _builder.append("private String ");
        String _name_1 = event.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append(" = \"");
        String _name_2 = event.getName();
        _builder.append(_name_2, "\t\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<State> _states = model.getStates();
      for(final State state : _states) {
        _builder.append("\t\t");
        _builder.append("public State ");
        CharSequence _generateState = this.generateState(state);
        _builder.append(_generateState, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Alter> _alters = model.getAlters();
      for(final Alter alter : _alters) {
        _builder.append("\t\t");
        _builder.append(alter, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateState(final State state) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = state.getName();
    _builder.append(_name);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append(" \t");
    _builder.newLine();
    {
      EList<Local> _locals = state.getLocals();
      for(final Local local : _locals) {
        _builder.append("\t");
        _builder.append("private ");
        DataType _type = local.getType();
        _builder.append(_type, "\t");
        _builder.append(" ");
        String _name_1 = local.getName();
        _builder.append(_name_1, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Local> _locals_1 = state.getLocals();
      for(final Local local_1 : _locals_1) {
        _builder.append("\t");
        _builder.append("public ");
        DataType _type_1 = local_1.getType();
        _builder.append(_type_1, "\t");
        _builder.append(" get");
        String _name_2 = local_1.getName();
        _builder.append(_name_2, "\t");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return this.");
        String _name_3 = local_1.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void set");
        String _name_4 = local_1.getName();
        _builder.append(_name_4, "\t");
        _builder.append("(");
        DataType _type_2 = local_1.getType();
        _builder.append(_type_2, "\t");
        _builder.append(" name){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.");
        String _name_5 = local_1.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append(" = name;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public void onEvent(String event) {");
    _builder.newLine();
    {
      EList<Transition> _transitions = state.getTransitions();
      for(final Transition transition : _transitions) {
        _builder.append("\t\t");
        _builder.append("if (");
        String _name_6 = transition.getEvent().getName();
        _builder.append(_name_6, "\t\t");
        _builder.append(".Equals(event)) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("this.currentState = ");
        String _name_7 = transition.getState().getName();
        _builder.append(_name_7, "\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public void generateUppaal(final Model model, final IFileSystemAccess2 fsa) {
    EList<Automaton> automata = model.getAutomaton();
    StringConcatenation _builder = new StringConcatenation();
    ArrayList<String> globals = new ArrayList<String>();
    _builder.newLineIfNotEmpty();
    EList<Global> _globals = model.getGlobals();
    for (final Global global : _globals) {
      {
        DataType _type = global.getType();
        String _plus = (_type + " ");
        String _name = global.getName();
        String _plus_1 = (_plus + _name);
        String g = (_plus_1 + ";");
        boolean _contains = g.contains("String");
        boolean _not = (!_contains);
        if (_not) {
          globals.add(g);
        }
      }
    }
    _builder.newLineIfNotEmpty();
    {
      for(final String global_1 : globals) {
        _builder.append(global_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      for(final Automaton automaton : automata) {
        ArrayList<String> channels = new ArrayList<String>();
        _builder.newLineIfNotEmpty();
        ArrayList<String> edges = new ArrayList<String>();
        _builder.newLineIfNotEmpty();
        _builder.append("process ");
        String _name = automaton.getName();
        _builder.append(_name);
        _builder.append("(\t");
        _builder.newLineIfNotEmpty();
        EList<Location> _location = automaton.getLocation();
        for (final Location location : _location) {
          EList<Transition> _transitions = location.getState().getTransitions();
          for (final Transition transition : _transitions) {
            channels.add(transition.getEvent().getName());
          }
        }
        _builder.newLineIfNotEmpty();
        {
          boolean _hasElements = false;
          for(final String chan : channels) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(",", "");
            }
            _builder.append("chan &");
            _builder.append(chan);
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("){");
        _builder.newLine();
        _builder.append("\t");
        HashMap<String, String> propsMap = new HashMap<String, String>();
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        EList<Location> _location_1 = automaton.getLocation();
        for (final Location location_1 : _location_1) {
          EList<Local> _locals = location_1.getState().getLocals();
          for (final Local prop : _locals) {
            String _name_1 = prop.getName();
            DataType _type = prop.getType();
            String _plus = (_type + " ");
            String _name_2 = prop.getName();
            String _plus_1 = (_plus + _name_2);
            String _plus_2 = (_plus_1 + ";");
            propsMap.put(_name_1, _plus_2);
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        Object[] props = propsMap.values().toArray();
        _builder.newLineIfNotEmpty();
        {
          for(final Object prop_1 : props) {
            _builder.append("\t");
            _builder.append(prop_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("state");
        _builder.newLine();
        {
          EList<Location> _location_2 = automaton.getLocation();
          boolean _hasElements_1 = false;
          for(final Location location_2 : _location_2) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(",", "\t\t");
            }
            _builder.append("\t\t");
            String _name_3 = location_2.getState().getName();
            _builder.append(_name_3, "\t\t");
            _builder.newLineIfNotEmpty();
          }
          if (_hasElements_1) {
            _builder.append(";", "\t\t");
          }
        }
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("init ");
        String _name_4 = automaton.getLocation().get(0).getState().getName();
        _builder.append(_name_4, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("trans");
        _builder.newLine();
        {
          EList<Location> _location_3 = automaton.getLocation();
          for(final Location location_3 : _location_3) {
            _builder.append("\t\t");
            State state = location_3.getState();
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            boolean _isEmpty = state.getTransitions().isEmpty();
            boolean _not = (!_isEmpty);
            if (_not) {
              EList<Transition> _transitions_1 = state.getTransitions();
              for (final Transition transition_1 : _transitions_1) {
                {
                  String _name_5 = state.getName();
                  String _plus_3 = (_name_5 + " -> ");
                  String _name_6 = transition_1.getState().getName();
                  String _plus_4 = (_plus_3 + _name_6);
                  String edge = (_plus_4 + "{");
                  Condition condition = transition_1.getCondition();
                  if ((condition != null)) {
                    String _edge = edge;
                    String _name_7 = condition.getLeft().getVariable().getName();
                    String _plus_5 = (" guard " + _name_7);
                    ComparisonOperator _operator = condition.getOperator();
                    String _plus_6 = (_plus_5 + _operator);
                    String _lowerCase = condition.getRight().toLowerCase();
                    String _plus_7 = (_plus_6 + _lowerCase);
                    String _plus_8 = (_plus_7 + ";");
                    edge = (_edge + _plus_8);
                  }
                  String _edge_1 = edge;
                  String _name_8 = transition_1.getEvent().getName();
                  String _plus_9 = (" sync " + _name_8);
                  String _plus_10 = (_plus_9 + "!;");
                  edge = (_edge_1 + _plus_10);
                  Assignment assignment = transition_1.getAssignment();
                  if ((assignment != null)) {
                    DataType _type_1 = assignment.getCurrentVar().getVariable().getType();
                    String type = (_type_1 + "");
                    boolean _contains = type.contains("String");
                    boolean _not_1 = (!_contains);
                    if (_not_1) {
                      String _edge_2 = edge;
                      String _name_9 = assignment.getCurrentVar().getVariable().getName();
                      String _plus_11 = (" assign " + _name_9);
                      String _plus_12 = (_plus_11 + " = ");
                      String _value = assignment.getValue();
                      String _plus_13 = (_plus_12 + _value);
                      String _plus_14 = (_plus_13 + ";");
                      edge = (_edge_2 + _plus_14);
                    }
                  }
                  String _edge_3 = edge;
                  String _plus_15 = edge = (_edge_3 + " }");
                  edges.add(_plus_15);
                }
              }
            }
            _builder.append("\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _hasElements_2 = false;
          for(final String edge : edges) {
            if (!_hasElements_2) {
              _hasElements_2 = true;
            } else {
              _builder.appendImmediate(",", "\t\t");
            }
            _builder.append("\t\t");
            _builder.append(edge, "\t\t");
            _builder.newLineIfNotEmpty();
          }
          if (_hasElements_2) {
            _builder.append(";", "\t\t");
          }
        }
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EList<Event> _events = model.getEvents();
      for(final Event event : _events) {
        _builder.append("chan ");
        String _name_5 = event.getName();
        _builder.append(_name_5);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      for(final Automaton automaton_1 : automata) {
        ArrayList<String> channels_1 = new ArrayList<String>();
        _builder.newLineIfNotEmpty();
        EList<Location> _location_4 = automaton_1.getLocation();
        for (final Location location_4 : _location_4) {
          EList<Transition> _transitions_2 = location_4.getState().getTransitions();
          for (final Transition transition_2 : _transitions_2) {
            channels_1.add(transition_2.getEvent().getName());
          }
        }
        _builder.newLineIfNotEmpty();
        String _name_6 = automaton_1.getName();
        _builder.append(_name_6);
        _builder.append("1 = ");
        String _name_7 = automaton_1.getName();
        _builder.append(_name_7);
        _builder.append("(");
        _builder.newLineIfNotEmpty();
        {
          boolean _hasElements_3 = false;
          for(final String chan_1 : channels_1) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder.appendImmediate(",", "");
            }
            _builder.append(chan_1);
            _builder.append(" ");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(");");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EList<Automaton> _automaton = model.getAutomaton();
      for(final Automaton automaton_2 : _automaton) {
        _builder.append("system ");
        String _name_8 = automaton_2.getName();
        _builder.append(_name_8);
        _builder.append("1;");
        _builder.newLineIfNotEmpty();
      }
    }
    CharSequence context = _builder;
    String _plus_3 = (model + ".xta");
    fsa.generateFile(_plus_3, context);
  }
}
