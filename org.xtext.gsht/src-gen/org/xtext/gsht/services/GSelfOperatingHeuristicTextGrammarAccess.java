/*
 * generated by Xtext 2.29.0
 */
package org.xtext.gsht.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GSelfOperatingHeuristicTextGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDRONEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDroneKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cGLOBALKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cGlobalKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cGlobalsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cGlobalsGlobalParserRuleCall_2_2_0 = (RuleCall)cGlobalsAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEVENTSKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEventsKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cEventsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cEventsEventParserRuleCall_3_2_0 = (RuleCall)cEventsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cStatesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cStatesStateParserRuleCall_4_0_0 = (RuleCall)cStatesAssignment_4_0.eContents().get(0);
		private final Assignment cAltersAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cAltersAlterParserRuleCall_4_1_0 = (RuleCall)cAltersAssignment_4_1.eContents().get(0);
		
		//Model:
		//    ('DRONE' | 'drone' ) name=ID
		//    (('GLOBAL' | 'global')
		//    '{'
		//        (globals+=Global)*
		//    '}')?
		//     (('EVENTS' | 'events')*
		//    '{'
		//        (events+=Event)*
		//    '}')*
		//    (states+=State | alters+=Alter)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('DRONE' | 'drone' ) name=ID
		//(('GLOBAL' | 'global')
		//'{'
		//    (globals+=Global)*
		//'}')?
		// (('EVENTS' | 'events')*
		//'{'
		//    (events+=Event)*
		//'}')*
		//(states+=State | alters+=Alter)*
		public Group getGroup() { return cGroup; }
		
		//('DRONE' | 'drone' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'DRONE'
		public Keyword getDRONEKeyword_0_0() { return cDRONEKeyword_0_0; }
		
		//'drone'
		public Keyword getDroneKeyword_0_1() { return cDroneKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(('GLOBAL' | 'global')
		//'{'
		//    (globals+=Global)*
		//'}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//('GLOBAL' | 'global')
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//'GLOBAL'
		public Keyword getGLOBALKeyword_2_0_0() { return cGLOBALKeyword_2_0_0; }
		
		//'global'
		public Keyword getGlobalKeyword_2_0_1() { return cGlobalKeyword_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//(globals+=Global)*
		public Assignment getGlobalsAssignment_2_2() { return cGlobalsAssignment_2_2; }
		
		//Global
		public RuleCall getGlobalsGlobalParserRuleCall_2_2_0() { return cGlobalsGlobalParserRuleCall_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
		
		// (('EVENTS' | 'events')*
		//'{'
		//    (events+=Event)*
		//'}')*
		public Group getGroup_3() { return cGroup_3; }
		
		//('EVENTS' | 'events')*
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'EVENTS'
		public Keyword getEVENTSKeyword_3_0_0() { return cEVENTSKeyword_3_0_0; }
		
		//'events'
		public Keyword getEventsKeyword_3_0_1() { return cEventsKeyword_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//(events+=Event)*
		public Assignment getEventsAssignment_3_2() { return cEventsAssignment_3_2; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_3_2_0() { return cEventsEventParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
		
		//(states+=State | alters+=Alter)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//states+=State
		public Assignment getStatesAssignment_4_0() { return cStatesAssignment_4_0; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_4_0_0() { return cStatesStateParserRuleCall_4_0_0; }
		
		//alters+=Alter
		public Assignment getAltersAssignment_4_1() { return cAltersAssignment_4_1; }
		
		//Alter
		public RuleCall getAltersAlterParserRuleCall_4_1_0() { return cAltersAlterParserRuleCall_4_1_0; }
	}
	public class GlobalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.Global");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cASKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAsKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//Global:
		//    name=ID ('AS' | 'as') type=DataType ('=' value=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('AS' | 'as') type=DataType ('=' value=STRING)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('AS' | 'as')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'AS'
		public Keyword getASKeyword_1_0() { return cASKeyword_1_0; }
		
		//'as'
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_2_0() { return cTypeDataTypeEnumRuleCall_2_0; }
		
		//('=' value=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
	}
	public class LocalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.Local");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cASKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAsKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//Local:
		//    name=ID ('AS' | 'as') type=DataType ('=' value=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('AS' | 'as') type=DataType ('=' value=STRING)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('AS' | 'as')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'AS'
		public Keyword getASKeyword_1_0() { return cASKeyword_1_0; }
		
		//'as'
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_2_0() { return cTypeDataTypeEnumRuleCall_2_0; }
		
		//('=' value=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSTATEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cStateKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cPROPSKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cPropsKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLocalsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLocalsLocalParserRuleCall_2_2_0 = (RuleCall)cLocalsAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cTRANSITIONSKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cTransitionsKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cTransitionsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cTransitionsTransitionParserRuleCall_3_2_0 = (RuleCall)cTransitionsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//State:
		//    ('STATE' | 'state') name=ID
		//    (('PROPS' | 'props')
		//    '{'
		//        (locals+=Local)*
		//    '}'
		//    )?
		//    (('TRANSITIONS' | 'transitions')
		//    '{'
		//        (transitions+=Transition)*
		//    '}'
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('STATE' | 'state') name=ID
		//(('PROPS' | 'props')
		//'{'
		//    (locals+=Local)*
		//'}'
		//)?
		//(('TRANSITIONS' | 'transitions')
		//'{'
		//    (transitions+=Transition)*
		//'}'
		//)?
		public Group getGroup() { return cGroup; }
		
		//('STATE' | 'state')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'STATE'
		public Keyword getSTATEKeyword_0_0() { return cSTATEKeyword_0_0; }
		
		//'state'
		public Keyword getStateKeyword_0_1() { return cStateKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(('PROPS' | 'props')
		//'{'
		//    (locals+=Local)*
		//'}'
		//)?
		public Group getGroup_2() { return cGroup_2; }
		
		//('PROPS' | 'props')
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//'PROPS'
		public Keyword getPROPSKeyword_2_0_0() { return cPROPSKeyword_2_0_0; }
		
		//'props'
		public Keyword getPropsKeyword_2_0_1() { return cPropsKeyword_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//(locals+=Local)*
		public Assignment getLocalsAssignment_2_2() { return cLocalsAssignment_2_2; }
		
		//Local
		public RuleCall getLocalsLocalParserRuleCall_2_2_0() { return cLocalsLocalParserRuleCall_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
		
		//(('TRANSITIONS' | 'transitions')
		//'{'
		//    (transitions+=Transition)*
		//'}'
		//)?
		public Group getGroup_3() { return cGroup_3; }
		
		//('TRANSITIONS' | 'transitions')
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'TRANSITIONS'
		public Keyword getTRANSITIONSKeyword_3_0_0() { return cTRANSITIONSKeyword_3_0_0; }
		
		//'transitions'
		public Keyword getTransitionsKeyword_3_0_1() { return cTransitionsKeyword_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//(transitions+=Transition)*
		public Assignment getTransitionsAssignment_3_2() { return cTransitionsAssignment_3_2; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_3_2_0() { return cTransitionsTransitionParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class AlterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.Alter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cALTERKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAlterKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSTATEKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cStateKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateStateCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_2_0_1 = (RuleCall)cStateStateCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cPROPSKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cPropsKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cLocalsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLocalsLocalParserRuleCall_3_2_0 = (RuleCall)cLocalsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cTRANSITIONSKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cTransitionsKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cTransitionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_2_0 = (RuleCall)cTransitionsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//Alter:
		//    ('ALTER' | 'alter') ('STATE' | 'state') state=[State]
		//    (('PROPS' | 'props')
		//    '{'
		//        (locals+=Local)*
		//    '}'
		//    )?
		//    (('TRANSITIONS' | 'transitions')
		//    '{'
		//        (transitions+=Transition)*
		//    '}'
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('ALTER' | 'alter') ('STATE' | 'state') state=[State]
		//(('PROPS' | 'props')
		//'{'
		//    (locals+=Local)*
		//'}'
		//)?
		//(('TRANSITIONS' | 'transitions')
		//'{'
		//    (transitions+=Transition)*
		//'}'
		//)?
		public Group getGroup() { return cGroup; }
		
		//('ALTER' | 'alter')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'ALTER'
		public Keyword getALTERKeyword_0_0() { return cALTERKeyword_0_0; }
		
		//'alter'
		public Keyword getAlterKeyword_0_1() { return cAlterKeyword_0_1; }
		
		//('STATE' | 'state')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'STATE'
		public Keyword getSTATEKeyword_1_0() { return cSTATEKeyword_1_0; }
		
		//'state'
		public Keyword getStateKeyword_1_1() { return cStateKeyword_1_1; }
		
		//state=[State]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//[State]
		public CrossReference getStateStateCrossReference_2_0() { return cStateStateCrossReference_2_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_2_0_1() { return cStateStateIDTerminalRuleCall_2_0_1; }
		
		//(('PROPS' | 'props')
		//'{'
		//    (locals+=Local)*
		//'}'
		//)?
		public Group getGroup_3() { return cGroup_3; }
		
		//('PROPS' | 'props')
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'PROPS'
		public Keyword getPROPSKeyword_3_0_0() { return cPROPSKeyword_3_0_0; }
		
		//'props'
		public Keyword getPropsKeyword_3_0_1() { return cPropsKeyword_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//(locals+=Local)*
		public Assignment getLocalsAssignment_3_2() { return cLocalsAssignment_3_2; }
		
		//Local
		public RuleCall getLocalsLocalParserRuleCall_3_2_0() { return cLocalsLocalParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
		
		//(('TRANSITIONS' | 'transitions')
		//'{'
		//    (transitions+=Transition)*
		//'}'
		//)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('TRANSITIONS' | 'transitions')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'TRANSITIONS'
		public Keyword getTRANSITIONSKeyword_4_0_0() { return cTRANSITIONSKeyword_4_0_0; }
		
		//'transitions'
		public Keyword getTransitionsKeyword_4_0_1() { return cTransitionsKeyword_4_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//(transitions+=Transition)*
		public Assignment getTransitionsAssignment_4_2() { return cTransitionsAssignment_4_2; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_2_0() { return cTransitionsTransitionParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cONKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cOnKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventEventCrossReference_1_0 = (CrossReference)cEventAssignment_1.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_1_0_1 = (RuleCall)cEventEventCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cTOKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cToKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStateStateCrossReference_3_0 = (CrossReference)cStateAssignment_3.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_3_0_1 = (RuleCall)cStateStateCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cIFKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cIfKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Assignment cConditionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_4_1_0 = (RuleCall)cConditionAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Alternatives cAlternatives_4_2_0 = (Alternatives)cGroup_4_2.eContents().get(0);
		private final Keyword cSETKeyword_4_2_0_0 = (Keyword)cAlternatives_4_2_0.eContents().get(0);
		private final Keyword cSetKeyword_4_2_0_1 = (Keyword)cAlternatives_4_2_0.eContents().get(1);
		private final Assignment cAssignmentAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cAssignmentAssignmentParserRuleCall_4_2_1_0 = (RuleCall)cAssignmentAssignment_4_2_1.eContents().get(0);
		
		//Transition:
		//    ('ON' | 'on') event=[Event] ('TO' | 'to') state=[State] (('IF' | 'if' ) condition=Condition? (('SET' | 'set') assignment=Assignment)? )?;
		@Override public ParserRule getRule() { return rule; }
		
		//('ON' | 'on') event=[Event] ('TO' | 'to') state=[State] (('IF' | 'if' ) condition=Condition? (('SET' | 'set') assignment=Assignment)? )?
		public Group getGroup() { return cGroup; }
		
		//('ON' | 'on')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'ON'
		public Keyword getONKeyword_0_0() { return cONKeyword_0_0; }
		
		//'on'
		public Keyword getOnKeyword_0_1() { return cOnKeyword_0_1; }
		
		//event=[Event]
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_1_0() { return cEventEventCrossReference_1_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_1_0_1() { return cEventEventIDTerminalRuleCall_1_0_1; }
		
		//('TO' | 'to')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'TO'
		public Keyword getTOKeyword_2_0() { return cTOKeyword_2_0; }
		
		//'to'
		public Keyword getToKeyword_2_1() { return cToKeyword_2_1; }
		
		//state=[State]
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }
		
		//[State]
		public CrossReference getStateStateCrossReference_3_0() { return cStateStateCrossReference_3_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_3_0_1() { return cStateStateIDTerminalRuleCall_3_0_1; }
		
		//(('IF' | 'if' ) condition=Condition? (('SET' | 'set') assignment=Assignment)? )?
		public Group getGroup_4() { return cGroup_4; }
		
		//('IF' | 'if' )
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'IF'
		public Keyword getIFKeyword_4_0_0() { return cIFKeyword_4_0_0; }
		
		//'if'
		public Keyword getIfKeyword_4_0_1() { return cIfKeyword_4_0_1; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_4_1() { return cConditionAssignment_4_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_4_1_0() { return cConditionConditionParserRuleCall_4_1_0; }
		
		//(('SET' | 'set') assignment=Assignment)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//('SET' | 'set')
		public Alternatives getAlternatives_4_2_0() { return cAlternatives_4_2_0; }
		
		//'SET'
		public Keyword getSETKeyword_4_2_0_0() { return cSETKeyword_4_2_0_0; }
		
		//'set'
		public Keyword getSetKeyword_4_2_0_1() { return cSetKeyword_4_2_0_1; }
		
		//assignment=Assignment
		public Assignment getAssignmentAssignment_4_2_1() { return cAssignmentAssignment_4_2_1; }
		
		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_4_2_1_0() { return cAssignmentAssignmentParserRuleCall_4_2_1_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.Event");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Event:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftVariableReferenceParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorComparisonOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightValueParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Condition:
		//    left=VariableReference operator=ComparisonOperator right=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//left=VariableReference operator=ComparisonOperator right=Value
		public Group getGroup() { return cGroup; }
		
		//left=VariableReference
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//VariableReference
		public RuleCall getLeftVariableReferenceParserRuleCall_0_0() { return cLeftVariableReferenceParserRuleCall_0_0; }
		
		//operator=ComparisonOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//ComparisonOperator
		public RuleCall getOperatorComparisonOperatorEnumRuleCall_1_0() { return cOperatorComparisonOperatorEnumRuleCall_1_0; }
		
		//right=Value
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Value
		public RuleCall getRightValueParserRuleCall_2_0() { return cRightValueParserRuleCall_2_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCurrentVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCurrentVarVariableReferenceParserRuleCall_0_0 = (RuleCall)cCurrentVarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Assignment:
		//    currentVar=VariableReference '=' value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//currentVar=VariableReference '=' value=Value
		public Group getGroup() { return cGroup; }
		
		//currentVar=VariableReference
		public Assignment getCurrentVarAssignment_0() { return cCurrentVarAssignment_0; }
		
		//VariableReference
		public RuleCall getCurrentVarVariableReferenceParserRuleCall_0_0() { return cCurrentVarVariableReferenceParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.VariableReference");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//VariableReference:
		//    variable=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_1() { return cVariableVariableIDTerminalRuleCall_0_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGlobalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//    Global | Local;
		@Override public ParserRule getRule() { return rule; }
		
		//Global | Local
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Global
		public RuleCall getGlobalParserRuleCall_0() { return cGlobalParserRuleCall_0; }
		
		//Local
		public RuleCall getLocalParserRuleCall_1() { return cLocalParserRuleCall_1; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDOUBLETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Value:
		//  BOOL | STRING | INT | DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//BOOL | STRING | INT | DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall_0() { return cBOOLTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_3() { return cDOUBLETerminalRuleCall_3; }
	}
	
	public class DataTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNOTQuestionMarkQuestionMarkKeyword_0_0 = (Keyword)cNOTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTIntKeyword_1_0 = (Keyword)cINTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOOLBooleanKeyword_2_0 = (Keyword)cBOOLEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDOUBLEDoubleKeyword_3_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSTRINGStringKeyword_4_0 = (Keyword)cSTRINGEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum DataType:
		//    NOT='??' | INT='int' | BOOL='boolean' | DOUBLE='double' | STRING='String';
		public EnumRule getRule() { return rule; }
		
		//NOT='??' | INT='int' | BOOL='boolean' | DOUBLE='double' | STRING='String'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NOT='??'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_0() { return cNOTEnumLiteralDeclaration_0; }
		
		//'??'
		public Keyword getNOTQuestionMarkQuestionMarkKeyword_0_0() { return cNOTQuestionMarkQuestionMarkKeyword_0_0; }
		
		//INT='int'
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_1() { return cINTEnumLiteralDeclaration_1; }
		
		//'int'
		public Keyword getINTIntKeyword_1_0() { return cINTIntKeyword_1_0; }
		
		//BOOL='boolean'
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_2() { return cBOOLEnumLiteralDeclaration_2; }
		
		//'boolean'
		public Keyword getBOOLBooleanKeyword_2_0() { return cBOOLBooleanKeyword_2_0; }
		
		//DOUBLE='double'
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_3() { return cDOUBLEEnumLiteralDeclaration_3; }
		
		//'double'
		public Keyword getDOUBLEDoubleKeyword_3_0() { return cDOUBLEDoubleKeyword_3_0; }
		
		//STRING='String'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_4() { return cSTRINGEnumLiteralDeclaration_4; }
		
		//'String'
		public Keyword getSTRINGStringKeyword_4_0() { return cSTRINGStringKeyword_4_0; }
	}
	public class ComparisonOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNOT_BOOLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNOT_BOOLCurrencySignCurrencySignKeyword_0_0 = (Keyword)cNOT_BOOLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQUALSExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOT_EQUALSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQUALSEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEQUALSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THANEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_THANGreaterThanSignKeyword_3_0 = (Keyword)cGREATER_THANEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_THANEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLESS_THANLessThanSignKeyword_4_0 = (Keyword)cLESS_THANEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THAN_OR_EQUALSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGREATER_THAN_OR_EQUALSGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGREATER_THAN_OR_EQUALSEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_THAN_OR_EQUALSEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLESS_THAN_OR_EQUALSLessThanSignEqualsSignKeyword_6_0 = (Keyword)cLESS_THAN_OR_EQUALSEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum ComparisonOperator:
		//    NOT_BOOL='¤¤' | NOT_EQUALS='!=' | EQUALS='==' | GREATER_THAN='>' | LESS_THAN='<' | GREATER_THAN_OR_EQUALS='>=' | LESS_THAN_OR_EQUALS='<=';
		public EnumRule getRule() { return rule; }
		
		//NOT_BOOL='¤¤' | NOT_EQUALS='!=' | EQUALS='==' | GREATER_THAN='>' | LESS_THAN='<' | GREATER_THAN_OR_EQUALS='>=' | LESS_THAN_OR_EQUALS='<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NOT_BOOL='¤¤'
		public EnumLiteralDeclaration getNOT_BOOLEnumLiteralDeclaration_0() { return cNOT_BOOLEnumLiteralDeclaration_0; }
		
		//'¤¤'
		public Keyword getNOT_BOOLCurrencySignCurrencySignKeyword_0_0() { return cNOT_BOOLCurrencySignCurrencySignKeyword_0_0; }
		
		//NOT_EQUALS='!='
		public EnumLiteralDeclaration getNOT_EQUALSEnumLiteralDeclaration_1() { return cNOT_EQUALSEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNOT_EQUALSExclamationMarkEqualsSignKeyword_1_0() { return cNOT_EQUALSExclamationMarkEqualsSignKeyword_1_0; }
		
		//EQUALS='=='
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_2() { return cEQUALSEnumLiteralDeclaration_2; }
		
		//'=='
		public Keyword getEQUALSEqualsSignEqualsSignKeyword_2_0() { return cEQUALSEqualsSignEqualsSignKeyword_2_0; }
		
		//GREATER_THAN='>'
		public EnumLiteralDeclaration getGREATER_THANEnumLiteralDeclaration_3() { return cGREATER_THANEnumLiteralDeclaration_3; }
		
		//'>'
		public Keyword getGREATER_THANGreaterThanSignKeyword_3_0() { return cGREATER_THANGreaterThanSignKeyword_3_0; }
		
		//LESS_THAN='<'
		public EnumLiteralDeclaration getLESS_THANEnumLiteralDeclaration_4() { return cLESS_THANEnumLiteralDeclaration_4; }
		
		//'<'
		public Keyword getLESS_THANLessThanSignKeyword_4_0() { return cLESS_THANLessThanSignKeyword_4_0; }
		
		//GREATER_THAN_OR_EQUALS='>='
		public EnumLiteralDeclaration getGREATER_THAN_OR_EQUALSEnumLiteralDeclaration_5() { return cGREATER_THAN_OR_EQUALSEnumLiteralDeclaration_5; }
		
		//'>='
		public Keyword getGREATER_THAN_OR_EQUALSGreaterThanSignEqualsSignKeyword_5_0() { return cGREATER_THAN_OR_EQUALSGreaterThanSignEqualsSignKeyword_5_0; }
		
		//LESS_THAN_OR_EQUALS='<='
		public EnumLiteralDeclaration getLESS_THAN_OR_EQUALSEnumLiteralDeclaration_6() { return cLESS_THAN_OR_EQUALSEnumLiteralDeclaration_6; }
		
		//'<='
		public Keyword getLESS_THAN_OR_EQUALSLessThanSignEqualsSignKeyword_6_0() { return cLESS_THAN_OR_EQUALSLessThanSignEqualsSignKeyword_6_0; }
	}
	
	private final ModelElements pModel;
	private final GlobalElements pGlobal;
	private final LocalElements pLocal;
	private final StateElements pState;
	private final AlterElements pAlter;
	private final TransitionElements pTransition;
	private final EventElements pEvent;
	private final ConditionElements pCondition;
	private final AssignmentElements pAssignment;
	private final DataTypeElements eDataType;
	private final ComparisonOperatorElements eComparisonOperator;
	private final VariableReferenceElements pVariableReference;
	private final VariableElements pVariable;
	private final ValueElements pValue;
	private final TerminalRule tINT;
	private final TerminalRule tBOOL;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GSelfOperatingHeuristicTextGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGlobal = new GlobalElements();
		this.pLocal = new LocalElements();
		this.pState = new StateElements();
		this.pAlter = new AlterElements();
		this.pTransition = new TransitionElements();
		this.pEvent = new EventElements();
		this.pCondition = new ConditionElements();
		this.pAssignment = new AssignmentElements();
		this.eDataType = new DataTypeElements();
		this.eComparisonOperator = new ComparisonOperatorElements();
		this.pVariableReference = new VariableReferenceElements();
		this.pVariable = new VariableElements();
		this.pValue = new ValueElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.INT");
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.BOOL");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gsht.GSelfOperatingHeuristicText.DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.gsht.GSelfOperatingHeuristicText".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    ('DRONE' | 'drone' ) name=ID
	//    (('GLOBAL' | 'global')
	//    '{'
	//        (globals+=Global)*
	//    '}')?
	//     (('EVENTS' | 'events')*
	//    '{'
	//        (events+=Event)*
	//    '}')*
	//    (states+=State | alters+=Alter)*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Global:
	//    name=ID ('AS' | 'as') type=DataType ('=' value=STRING)?;
	public GlobalElements getGlobalAccess() {
		return pGlobal;
	}
	
	public ParserRule getGlobalRule() {
		return getGlobalAccess().getRule();
	}
	
	//Local:
	//    name=ID ('AS' | 'as') type=DataType ('=' value=STRING)?;
	public LocalElements getLocalAccess() {
		return pLocal;
	}
	
	public ParserRule getLocalRule() {
		return getLocalAccess().getRule();
	}
	
	//State:
	//    ('STATE' | 'state') name=ID
	//    (('PROPS' | 'props')
	//    '{'
	//        (locals+=Local)*
	//    '}'
	//    )?
	//    (('TRANSITIONS' | 'transitions')
	//    '{'
	//        (transitions+=Transition)*
	//    '}'
	//    )?
	//;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Alter:
	//    ('ALTER' | 'alter') ('STATE' | 'state') state=[State]
	//    (('PROPS' | 'props')
	//    '{'
	//        (locals+=Local)*
	//    '}'
	//    )?
	//    (('TRANSITIONS' | 'transitions')
	//    '{'
	//        (transitions+=Transition)*
	//    '}'
	//    )?
	//;
	public AlterElements getAlterAccess() {
		return pAlter;
	}
	
	public ParserRule getAlterRule() {
		return getAlterAccess().getRule();
	}
	
	//Transition:
	//    ('ON' | 'on') event=[Event] ('TO' | 'to') state=[State] (('IF' | 'if' ) condition=Condition? (('SET' | 'set') assignment=Assignment)? )?;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Event:
	//    name=ID;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Condition:
	//    left=VariableReference operator=ComparisonOperator right=Value;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Assignment:
	//    currentVar=VariableReference '=' value=Value;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//enum DataType:
	//    NOT='??' | INT='int' | BOOL='boolean' | DOUBLE='double' | STRING='String';
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//enum ComparisonOperator:
	//    NOT_BOOL='¤¤' | NOT_EQUALS='!=' | EQUALS='==' | GREATER_THAN='>' | LESS_THAN='<' | GREATER_THAN_OR_EQUALS='>=' | LESS_THAN_OR_EQUALS='<=';
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return eComparisonOperator;
	}
	
	public EnumRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//VariableReference:
	//    variable=[Variable];
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}
	
	//Variable:
	//    Global | Local;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Value:
	//  BOOL | STRING | INT | DOUBLE;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//    ('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal BOOL returns ecore::EBoolean:
	//    ('TRUE' | 'true' | 'True') | ('FALSE' | 'false' | 'False');
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//    ('0'..'9')+ '.' ('0'..'9')* (('E'|'e') ('+'|'-')? ('0'..'9')+)?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
