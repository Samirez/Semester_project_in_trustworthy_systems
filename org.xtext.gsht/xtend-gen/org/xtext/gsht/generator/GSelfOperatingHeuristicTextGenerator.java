/**
 * generated by Xtext 2.30.0
 */
package org.xtext.gsht.generator;

import com.google.common.collect.Iterators;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.gsht.gSelfOperatingHeuristicText.Alter;
import org.xtext.gsht.gSelfOperatingHeuristicText.Automaton;
import org.xtext.gsht.gSelfOperatingHeuristicText.DataType;
import org.xtext.gsht.gSelfOperatingHeuristicText.Event;
import org.xtext.gsht.gSelfOperatingHeuristicText.Local;
import org.xtext.gsht.gSelfOperatingHeuristicText.Location;
import org.xtext.gsht.gSelfOperatingHeuristicText.Model;
import org.xtext.gsht.gSelfOperatingHeuristicText.State;
import org.xtext.gsht.gSelfOperatingHeuristicText.Transition;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GSelfOperatingHeuristicTextGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Procedure1<Model> _function = (Model it) -> {
      this.generateFile(it, fsa);
    };
    IteratorExtensions.<Model>forEach(Iterators.<Model>filter(resource.getAllContents(), Model.class), _function);
    final Procedure1<Model> _function_1 = (Model it) -> {
      this.generateUppaal(it, fsa);
    };
    IteratorExtensions.<Model>forEach(Iterators.<Model>filter(resource.getAllContents(), Model.class), _function_1);
  }

  public void generateFile(final Model model, final IFileSystemAccess2 fsa) {
    String _plus = (model + ".java");
    fsa.generateFile(_plus, this.generate(model));
  }

  public CharSequence generate(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("public class ");
    String _name = model.getName();
    _builder.append(_name, "\t");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private State currentState;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Event> _events = model.getEvents();
      for(final Event event : _events) {
        _builder.append("\t\t");
        _builder.append("private String ");
        String _name_1 = event.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append(" = \"");
        String _name_2 = event.getName();
        _builder.append(_name_2, "\t\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<State> _states = model.getStates();
      for(final State state : _states) {
        _builder.append("\t\t");
        _builder.append("public State ");
        CharSequence _generateState = this.generateState(state);
        _builder.append(_generateState, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Alter> _alters = model.getAlters();
      for(final Alter alter : _alters) {
        _builder.append("\t\t");
        _builder.append(alter, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateState(final State state) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = state.getName();
    _builder.append(_name);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append(" \t");
    _builder.newLine();
    {
      EList<Local> _locals = state.getLocals();
      for(final Local local : _locals) {
        _builder.append("\t");
        _builder.append("private ");
        DataType _type = local.getType();
        _builder.append(_type, "\t");
        _builder.append(" ");
        String _name_1 = local.getName();
        _builder.append(_name_1, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Local> _locals_1 = state.getLocals();
      for(final Local local_1 : _locals_1) {
        _builder.append("\t");
        _builder.append("public ");
        DataType _type_1 = local_1.getType();
        _builder.append(_type_1, "\t");
        _builder.append(" get");
        String _name_2 = local_1.getName();
        _builder.append(_name_2, "\t");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return this.");
        String _name_3 = local_1.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void set");
        String _name_4 = local_1.getName();
        _builder.append(_name_4, "\t");
        _builder.append("(");
        DataType _type_2 = local_1.getType();
        _builder.append(_type_2, "\t");
        _builder.append(" name){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.");
        String _name_5 = local_1.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append(" = name;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public void onEvent(String event) {");
    _builder.newLine();
    {
      EList<Transition> _transitions = state.getTransitions();
      for(final Transition transition : _transitions) {
        _builder.append("\t\t");
        _builder.append("if (");
        String _name_6 = transition.getEvent().getName();
        _builder.append(_name_6, "\t\t");
        _builder.append(".Equals(event)) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("this.currentState = ");
        String _name_7 = transition.getState().getName();
        _builder.append(_name_7, "\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public void generateUppaal(final Model model, final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Automaton> _automaton = model.getAutomaton();
      for(final Automaton automaton : _automaton) {
        _builder.append("process ");
        String _name = automaton.getName();
        _builder.append(_name);
        _builder.append(" {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("state");
        _builder.newLine();
        {
          EList<Location> _location = automaton.getLocation();
          boolean _hasElements = false;
          for(final Location location : _location) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(",", "\t\t");
            }
            _builder.append("\t\t");
            String _name_1 = location.getState().getName();
            _builder.append(_name_1, "\t\t");
            _builder.newLineIfNotEmpty();
          }
          if (_hasElements) {
            _builder.append(";", "\t\t");
          }
        }
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("init ");
        String _name_2 = automaton.getLocation().get(0).getState().getName();
        _builder.append(_name_2, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("trans");
        _builder.newLine();
        {
          EList<Location> _location_1 = automaton.getLocation();
          boolean _hasElements_1 = false;
          for(final Location location_1 : _location_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            }
            _builder.append("\t\t");
            State state = location_1.getState();
            _builder.newLineIfNotEmpty();
            {
              if (((!state.getTransitions().isEmpty()) && (location_1 != automaton.getLocation().get(0)))) {
                _builder.append("\t\t");
                _builder.append(",");
                _builder.newLine();
              }
            }
            {
              EList<Transition> _transitions = state.getTransitions();
              boolean _hasElements_2 = false;
              for(final Transition transition : _transitions) {
                if (!_hasElements_2) {
                  _hasElements_2 = true;
                } else {
                  _builder.appendImmediate(",", "\t\t");
                }
                _builder.append("\t\t");
                String _name_3 = state.getName();
                _builder.append(_name_3, "\t\t");
                _builder.append(" -> ");
                String _name_4 = transition.getState().getName();
                _builder.append(_name_4, "\t\t");
                _builder.append(" {}\t");
                _builder.newLineIfNotEmpty();
              }
            }
          }
          if (_hasElements_1) {
            _builder.append(";", "\t\t");
          }
        }
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      EList<Automaton> _automaton_1 = model.getAutomaton();
      for(final Automaton automaton_1 : _automaton_1) {
        _builder.append("system ");
        String _name_5 = automaton_1.getName();
        _builder.append(_name_5);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    CharSequence context = _builder;
    String _plus = (model + ".xta");
    fsa.generateFile(_plus, context);
  }
}
